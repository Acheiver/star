//-----------------------------------------------CHAT CLIENT---------------------------------------------------------------------------

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


package chatclient;
import java.net.*;
import java.io.*;
import java.util.*;
/**
 *
 * @author siri
 */
public class ChatRoom extends javax.swing.JFrame {

    public String user;
    Socket clientsocket;
    BufferedReader reader;
    PrintWriter pw;
    ArrayList<String> ulist=new ArrayList();
    Boolean ifconnected=false;
    
    /**
     * Creates new form ChatRoom
     */
    public ChatRoom() {
        initComponents();
    }
    public class NewUser implements Runnable
    {
        public void run()
        {
         String stream;
         String[] data;
         String done="done",connect= "connect",disconnect="disconnect",chat="chat";
         try
         {
             System.out.println("siriririririri"+reader.readLine());
              while((stream=reader.readLine())!=null)
              {
                
                 data=stream.split("@");
                 if(data[2].equals(chat))
                 {
                     
                     chattext.append(data[0]+": "+data[1]+"\n");
                 }
                 else if(data[2].equals(connect))
                 {
                     
                     chattext.removeAll();
                     ulist.add(data[0]);
                     
                     writeUsers(data[0]);
                 }
                 else if(data[2].equals(disconnect))
                 {
                     chattext.append(data[0]+": has disconnected\n");
                     
                 }
                 
                 else
                     chattext.append(data[0]+" Connected\n");
              }
         }
         catch(Exception e)
         {
             
         }
         
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        uname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        chattext = new javax.swing.JTextArea();
        cbutton = new java.awt.Button();
        dbutton = new java.awt.Button();
        sbutton = new java.awt.Button();
        jScrollPane3 = new javax.swing.JScrollPane();
        clientmsg = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("User Name: ");

        uname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unameActionPerformed(evt);
            }
        });

        jLabel2.setText("Online Users");

        chattext.setEditable(false);
        chattext.setColumns(20);
        chattext.setLineWrap(true);
        chattext.setRows(5);
        jScrollPane2.setViewportView(chattext);
        chattext.getAccessibleContext().setAccessibleName("sentmsg");

        cbutton.setLabel("Connect");
        cbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbuttonActionPerformed(evt);
            }
        });

        dbutton.setLabel("Disconnect");
        dbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbuttonActionPerformed(evt);
            }
        });

        sbutton.setLabel("Send");
        sbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sbuttonActionPerformed(evt);
            }
        });

        clientmsg.setColumns(20);
        clientmsg.setLineWrap(true);
        clientmsg.setRows(5);
        jScrollPane3.setViewportView(clientmsg);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setName("olusers"); // NOI18N
        jScrollPane4.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(uname, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbutton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dbutton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(sbutton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbutton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(uname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dbutton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.getAccessibleContext().setAccessibleName("lable1");
        uname.getAccessibleContext().setAccessibleName("uname");
        cbutton.getAccessibleContext().setAccessibleName("connect");

        pack();
    }// </editor-fold>                        

    private void unameActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
        
    }                                     

    private void sbuttonActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        if(clientmsg.getText().equals(""))
        {
            clientmsg.setText("");
            clientmsg.requestFocus();
        }
        else
        {
            String msg=clientmsg.getText();
            
            pw.println(user+"@"+msg+"@chat");
            pw.flush();
            clientmsg.setText("");
            clientmsg.requestFocus();
        }
    }                                       

    private void cbuttonActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        if(ifconnected==false)
        {
            user=uname.getText();
            System.out.println(user);
            uname.setEditable(false);
        try
        {
            clientsocket=new Socket("127.0.0.1",6969);
            InputStreamReader ISR=new InputStreamReader(clientsocket.getInputStream());
            reader=new BufferedReader(ISR);
            pw=new PrintWriter(clientsocket.getOutputStream());      
            pw.println(user+"@is online.@connect");
          
            pw.flush();
            ifconnected=true;
        }
        catch(Exception e)
        {
            //System.out.println("Exception caught:"+e);
            System.out.println(user);
            clientmsg.append("Cannot connect "+user);   
            uname.setEditable(true);
        }
        listenThread();
     }
        else if(ifconnected==true)
        {
            clientmsg.append("You are already connected"+user+"\n");
        }

    }                                       

    private void dbuttonActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        try{
        String dc=user+"@ @disconnect";
        pw.println(dc);
        pw.flush();
        clientsocket.close();
        ifconnected=false;
        uname.setEditable(true);
        jTextArea1.setText("");
        }
        catch(Exception e)
        {
            chattext.append("could not disconnect...Try Again");
        }
        
    }                                       
    public void listenThread()
    {
        Thread newuser=new Thread(new NewUser());
        newuser.start();
    }
    public void writeUsers(String users)
    {
      
       
        String[] data1=users.split("#");
        String x=users.replace("#", "\n");
       jTextArea1.removeAll();
       jTextArea1.setText(x);
      
      
    }
     /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatRoom().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private java.awt.Button cbutton;
    private javax.swing.JTextArea chattext;
    private javax.swing.JTextArea clientmsg;
    private java.awt.Button dbutton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private java.awt.Button sbutton;
    private javax.swing.JTextField uname;
    // End of variables declaration                   
}


//----------------------------------------------------CHAT SERVER-----------------------------------------------------------------
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package chatserver;

import java.net.ServerSocket;
import java.io.*;
import java.net.*;
import java.util.*;
/**
 *
 * @author siri
 */
public class ServerWindow extends javax.swing.JFrame {

    /**
     * Creates new form ServerWindow
     */
    ArrayList clientoutputstreams;
    ArrayList<String> olusers=new ArrayList();
    public ServerWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        ServerMsg = new java.awt.TextArea();
        stop = new java.awt.Button();
        start1 = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        stop.setLabel("Stop");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        start1.setLabel("Start");
        start1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ServerMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(start1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(327, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(ServerMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(start1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        stop.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>                        

    private void start1ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        ServerMsg.append("Server Started!!!");
        Thread startserver=new Thread(new ServerStart());
        startserver.start();
    }                                      

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
    }                                    
    public class ServerStart implements Runnable
    {
        
        public void run()
        {
           clientoutputstreams =new ArrayList();
            try
            {
                ServerSocket ss=new ServerSocket(6969);
                while(true)
                {
                    Socket clientsocket=ss.accept();
                    PrintWriter pw=new PrintWriter(clientsocket.getOutputStream());
                    clientoutputstreams.add(pw);      
                    Thread newthread=new Thread(new ClientHandler(clientsocket,pw));
                    newthread.start();
                }
            }
            catch(Exception e)
            {
                
            }
        }
    }
    public class ClientHandler implements Runnable
    {
        Socket soc;
        BufferedReader br;
        public ClientHandler(Socket clientsocket, PrintWriter pw)
        {
            try{
            soc=clientsocket;
            InputStreamReader is=new InputStreamReader(soc.getInputStream());
          
            br=new BufferedReader(is);
            }
            catch(Exception e)
            {
                System.out.println("EEEEEEEEEEEEEEXCEPTION");
            }
            
        }
        public void run()
        {
           String msg;
           String Data[];
            try
            {
                while((msg=br.readLine())!=null)
                {
                   
                    Data=msg.split("@");
                    
                    ServerMsg.append("Received from: "+Data[0]+Data[2]);
                    if(Data[2].equals("connect"))
                    {
                       
                        informClients(Data[0]+"@ @Connected");
                        informClients(Data[0]+"@"+Data[1]+"@"+"connect");
                        userAdd(Data[0]);
                    }
                    else if(Data[2].equals("disconnect"))
                    {
                        informClients(Data[0]+"@"+Data[1]+"@"+"disconnect");
                        userremove(Data[0]);
                    }
                    else if(Data[2].equals("chat"))
                    {
                        informClients(msg);
                    }
                }
            }
            catch(Exception e)
            {
                
            }
        }
    }
    public void informClients(String msg)
    {
        Iterator it=clientoutputstreams.iterator();
        while(it.hasNext())
        {
            try
            {
                PrintWriter writer=(PrintWriter)it.next();
                writer.println(msg);
                
                        ServerMsg.append("sending message to every one....");
                writer.flush();
               
               
            }
            catch(Exception e)
            {
                ServerMsg.append("Error telling everyone. \n");
            }
        }
    }
    public void userAdd (String data) {
            String message=null, add = "@ @connect", done = "Server@ @done", name = data;
            ServerMsg.append("Before " + name + " added. \n");
            olusers.add(name);
            ServerMsg.append("After " + name + " added. \n");
            String[] tempList = new String[(olusers.size())];
            olusers.toArray(tempList);

                for (int i=0;i<=olusers.size()-1;i++) {
                    if(message==null)
                        message=tempList[i]+"#";
                    else
                      message = message+tempList[i] + "#";
                    
                }
                
                informClients(message+add);
        
	}
public void userremove (String data) {
                String message=null, add = "@ @connect", done = "Server@ @done", name = data;
                olusers.remove(name);
                 String[] tempList = new String[(olusers.size())];
            olusers.toArray(tempList);

                for (int i=0;i<=olusers.size()-1;i++) {
                    if(message==null)
                        message=tempList[i]+"#";
                    else
                      message = message+tempList[i] + "#";
                    
                }
                
                informClients(message+add);
              
	}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private java.awt.TextArea ServerMsg;
    private java.awt.Button start1;
    private java.awt.Button stop;
    // End of variables declaration                   
}
